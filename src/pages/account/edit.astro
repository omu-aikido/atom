---
import { default as Layout } from "@/atom/layouts/auth-layout.astro";
import { grade, translateGrade } from "@/atom/utils";
import { getStatusFromSession, getUserFromSession } from "@/src/lib/user";
import ProgressCircle from "@/atom/components/ui/progress-circle.astro";

import { prisma } from "@/src/lib/prisma";
const session = Astro.locals.session
    ? Astro.locals.session
    : Astro.redirect("/signin?from=/account");
if (session instanceof Response) {
    return session;
}

const status = await getStatusFromSession(session);
const user = await getUserFromSession(session);
if (!status) {
    console.log("no status");
    return Astro.redirect("/signin?from=/account");
}
if (!user) {
    console.log("no user");
    return Astro.redirect("/signin?from=/account");
}
const { email, joinedAt, role, grade: gradeValue, getGradeAt } = status;
const { name } = user;

const errors = { lastName: "", firstName: "", year: "", grade: "" };
if (Astro.request.method === "POST") {
    try {
        const data = await Astro.request.formData();
        const firstName_input = data.get("first-name");
        const lastName_input = data.get("last-name");
        const year_input = Number(data.get("year"));
        const grade_input = Number(data.get("grade"));
        const getGradeAt_input = data.get("getGradeAt") as unknown as Date;
        const hasErrors = Object.values(errors).some((msg) => msg);
        if (!hasErrors) {
            await prisma.user.update({
                where: {
                    id: session.userId,
                },
                data: {
                    name: lastName_input + " " + firstName_input,
                },
            });
            await prisma.status.update({
                where: {
                    email: email,
                },
                data: {
                    joinedAt: Number(year_input),
                    grade: Number(grade_input),
                    getGradeAt: new Date(getGradeAt_input).toISOString(),
                },
            });
        }
    } catch (error) {
        if (error instanceof Error) {
            console.error(error.message);
        }
    }
}
---

<Layout title="大阪公立大学合氣道部 - ユーザー情報編集">
    <div class="container">
        <h1>会員情報</h1>
        <form id="profile-form" class="profile-form" method="post">
            <label for="name-fields">名前</label>
            <div class="name-fields">
                <div>
                    <input
                        type="text"
                        id="last-name"
                        name="last-name"
                        placeholder="姓"
                        required
                        value={name.split(" ")[0]}
                    />
                </div>
                <div>
                    <input
                        type="text"
                        id="first-name"
                        name="first-name"
                        placeholder="名"
                        required
                        value={name.split(" ")[1]}
                    />
                </div>
            </div>
            {errors.lastName && <p>{errors.lastName}</p>}
            {errors.firstName && <p>{errors.firstName}</p>}

            <label for="grade">所持級段位</label>
            <select id="grade" name="grade" required>
                {
                    grade.map((g) => (
                        <option
                            value={g.grade}
                            selected={g.grade === gradeValue}
                        >
                            {g.name}
                        </option>
                    ))
                }
            </select>
            <label for="getGradeAt">級段位の取得日</label>
            <input
                type="date"
                id="getGradeAt"
                name="getGradeAt"
                value={getGradeAt
                    ? new Date(getGradeAt).toISOString().split("T")[0]
                    : ""}
            />

            <label for="year">入部年度</label>
            <input
                type="number"
                id="year"
                name="year"
                placeholder="4桁の数字"
                value={joinedAt}
                required
            />
            <div id="loading" class="loading" style="display: none;">
                <ProgressCircle title="更新中" inline="true" />
            </div>
            <button type="submit" id="submit-button">更新</button>
            <button
                type="reset"
                id="reset-button"
                style="background-color: rgb(var(--maroon));">リセット</button
            >
            <button
                type="button"
                id="cancel-button"
                onclick="location.href='/account'"
                style="background-color: rgb(var(--green));">キャンセル</button
            >
        </form>
    </div>
</Layout>

<style>
    form {
        display: flex;
        flex-direction: column;
        gap: 1rem;
        max-width: 300px;
        margin: 0 auto;
    }
    .signup-form {
        display: flex;
        flex-direction: column;
        justify-content: center;
        border-radius: 8px;
        padding: 1em;
        box-shadow: 0 0 8px 4px rgb(var(--shadow) / 0.3);
    }

    .name-fields {
        display: flex;
        gap: 1rem;
    }
    .name-fields input {
        width: 80%;
    }

    .loading {
        margin-top: 1rem;
        font-size: 1rem;
        color: rgb(var(--subtext1));
    }
</style>
